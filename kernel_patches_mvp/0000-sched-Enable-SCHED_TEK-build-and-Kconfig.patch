// File: kernel_patches/0000-sched-Enable-SCHED_TEK-build-and-Kconfig.patch
// This patch sets up the build environment for SCHED_TEK by modifying
// Kconfig and Makefiles, and defining the main scheduler switch.
//
// Target files: kernel/sched/Kconfig, kernel/sched/Makefile, include/linux/sched.h

// --- A. kernel/sched/Kconfig modification (Pseudo-code) ---

config SCHED_TEK
    bool "SCHED_TEK: Controlled Bias Scheduler"
    depends on EXPERIMENTAL && SMP
    default y
    help
      This option enables the SCHED_TEK scheduler.
      SCHED_TEK introduces a controlled bias mechanism to CFS 
      to optimize both latency (responsiveness) and fairness.

config DEFAULT_SCHED
    string
    default "SCHED_TEK" if SCHED_TEK
    default "CFS" if DEFAULT_CFS

// --- B. kernel/sched/Makefile modification (Pseudo-code) ---

# Append SCHED_TEK source file to the build list
ifdef CONFIG_SCHED_TEK
  obj-y += sched_tek_core.o
endif

# Ensure sched_tek_core.o is built if the option is selected
obj-$(CONFIG_SCHED_TEK) += sched_tek_core.o 
obj-$(CONFIG_SCHED_TEK) += sched_tek_proc.o 

# --- C. include/linux/sched.h modification (Pseudo-code for Scheduler Switch) ---

// Define the main scheduler function prototype
#ifdef CONFIG_SCHED_TEK
extern void sched_tek_init(void);
extern struct task_struct *sched_tek_pick_next_task(struct rq *rq);
#define __SCHED_TEK_INIT() sched_tek_init()
#define __SCHED_TEK_PICK_NEXT_TASK(rq) sched_tek_pick_next_task(rq)
#else
#define __SCHED_TEK_INIT() 
#define __SCHED_TEK_PICK_NEXT_TASK(rq) NULL
#endif

// The kernel calls this entry point (e.g., in kernel/sched/core.c)
#ifdef CONFIG_SCHED_TEK
  #define INIT_SCHEDULER() __SCHED_TEK_INIT()
  #define PICK_NEXT_TASK(rq) __SCHED_TEK_PICK_NEXT_TASK(rq)
#elif defined(CONFIG_DEFAULT_CFS)
  #define INIT_SCHEDULER() cfs_init()
  // ... and so on for CFS
#endif